const Telegraf = require('telegraf').Telegraf;
const { message } = require('telegraf/filters');
require('dotenv').config();
const bot = new Telegraf(process.env.TOKEN);
const { authenticate, writeToSheet } = require('./google.js');

const questionnary = {
  how_long: {
    question: '–ö–∞–∫ –¥–∞–≤–Ω–æ –≤—ã –≤ –°–®–ê? üá∫üá∏',
    answers: ['–ú–µ–Ω—å—à–µ 1 –≥–æ–¥–∞', '1-3 –≥–æ–¥–∞', '3-5 –ª–µ—Ç', '–±–æ–ª–µ–µ 5 –ª–µ—Ç'],
  },
  creditCards: {
    question: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞—Ä—Ç—ã?',
    answers: ['–î–∞', '–ù–µ—Ç'],
  },
  creditScore: {
    question: '–ö–∞–∫–æ–π —É –≤–∞—Å Credit Score?',
    answers: ['0-650', '650-700', '700-750', '750+'],
  },
  overdue: {
    question: '–£ –≤–∞—Å –±—ã–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É?',
    answers: ['–î–∞', '–ù–µ—Ç'],
  },
};
const line = ['how_long', 'creditCards', 'creditScore', 'overdue'];
let result = {};

let state = 'idle';

const CHAT_ID = process.env.CHAT_ID;

console.log('BOT RUNS');
bot.command('start', async (ctx) => {
  const msg = await ctx.reply('–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
            url: 'https://t.me/creditshark',
          },
        ],
      ],
    },
  });
  await ctx.pinChatMessage(msg.message_id, { disable_notification: true });
  await ctx.reply(
    `
<b>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–≤—ã—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ "Credit Shark"</b>

–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è credit score –æ–Ω–ª–∞–π–Ω –∞ —Ç–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ñ–∏—Å—ã –≤–æ –≤—Å–µ—Ö –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –ê–º–µ—Ä–∏–∫–∏.

üåê <a href="https://creditshark.pro/">–ù–ê–® –°–ê–ô–¢</a>
‚úçÔ∏è <a href="https://t.me/creditshark_info">–ú–´ –í –¢–ï–õ–ï–ì–†–ê–ú</a>

–¢–∞–∫–∂–µ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏:

–û–±–º–µ–Ω –≤–∞–ª—é—Ç –≤ –°–®–ê –∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. –û–±–º–µ–Ω Zelle | <a href="https://t.me/obmen_la_ca">Obmenca</a>
–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –∞–≥–µ–Ω—Å—Ç–≤–æ. –†–µ–∫–ª–∞–º–∞ –ø–æ–¥ –∫–ª—é—á | <a href="http://t.me/sharkads_agency">Shark Ads Agency</a>

‚úÖ –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üÜô –ü–æ–≤—ã—Å–∏—Ç—å credit score', url: 'https://t.me/creditshark' },
            { text: 'üë©‚Äçüíª –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', url: 'https://t.me/creditshark_info' },
          ],
          [{ text: '–ù–∞—à —Å–∞–π—Ç üåê', url: 'https://creditshark.pro/' }],
          [{ text: 'üí∏ –û–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É', url: 'https://t.me/rfice220' }],
        ],
      },
      parse_mode: 'HTML',
      link_preview_options: { is_disabled: true },
    }
  );
  let text = `–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å–Ω–∏–∫`;
  await ctx.reply(text);

  currentQuestion = line[0];
  const firstQuestion = questionnary[currentQuestion];
  text = firstQuestion.question;

  await ctx.reply(text, {
    reply_markup: {
      inline_keyboard: [
        ...firstQuestion.answers.map((txt) => [
          { text: txt, callback_data: `${JSON.stringify({ question: currentQuestion, answer: txt })}` },
        ]),
      ],
    },
  });
  state = 'in_progress';
  result.username = `@${ctx.from.username}`;
  result.fullname = `${ctx.from.last_name} ${ctx.from.first_name}`;
});

bot.on(message('text'), async (ctx) => {
  if (state !== 'in_progress') {
    ctx.reply(`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å`);
  }
});

bot.on('callback_query', async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const { question, answer } = JSON.parse(callbackData);
  result[question] = answer;

  await ctx.answerCbQuery(answer);

  currentQuestionIndex = line.findIndex((v) => v === question);
  const nextQuestionIndex = line[currentQuestionIndex + 1];

  if (nextQuestionIndex) {
    const nextQuestion = questionnary[nextQuestionIndex];
    text = nextQuestion.question;

    await ctx.reply(text, {
      reply_markup: {
        inline_keyboard: [
          ...nextQuestion.answers.map((txt) => [
            { text: txt, callback_data: `${JSON.stringify({ question: nextQuestionIndex, answer: txt })}` },
          ]),
        ],
      },
    });
  } else {
    try {
      const googleAuth = await authenticate();
      await writeToSheet(googleAuth, Object.values(result));
    } catch (e) {
      throw e;
    }

    await ctx.reply('–û–ø—Ä–æ—Å –∑–∞–∫–æ–Ω—á–µ–Ω, —Å–ø–∞—Å–∏–±–æ. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞');
    try {
      await ctx.telegram.sendMessage(
        CHAT_ID,
        `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${result.username}, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: https://docs.google.com/spreadsheets/d/1h_-Mp-8afHWqw3rW1oSrpbTj3owbYeoHkOWWvlYJfqg/edit?gid=0#gid=0`
      );
    } catch (e) {
      console.log('error');
    }

    state = 'idle';
    result = {};
  }
});

bot.launch();

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
